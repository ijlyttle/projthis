% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow.R
\name{proj_use_workflow}
\alias{proj_use_workflow}
\title{Create directories for workflow}
\usage{
proj_use_workflow(
  path_proj = "workflow",
  git_ignore_data = TRUE,
  open = rlang::is_interactive()
)
}
\arguments{
\item{path_proj}{\code{character} path to workflow directory,
relative to the project directory.}

\item{git_ignore_data}{\code{logical} indicates to add \code{data} directory
to \code{.gitignore}.}

\item{open}{\code{logical} indicates to open the file for interactive editing.}
}
\value{
Invisible \code{NULL}, called for side effects.
}
\description{
Use this function to set up a workflow-directory structure.
}
\details{
This function will create:
\itemize{
\item a directory according to the \code{path_proj} you provide; it will be added to
\code{.Rbuildignore}. Within it:
\itemize{
\item a \code{data} directory, adding it to \code{.gitignore} if indicated.
\item a \code{README.Rmd} file.
}
}

In this context, a \emph{workflow} is a sequence of RMarkdown files that are
named, for example: \code{00-import.Rmd}, \code{01-do-something.Rmd}, etc., such that
each RMarkdown file:
\itemize{
\item writes only to its own dedicated sub-directory of \code{data}.
\item reads only from data directories of "earlier" RMarkdown files.
}

You can have more than one workflow directory in a repository, but it will be
easiest to manage if each workflow is its own "data universe", where data can
be imported or exported only using specific files at the start and end of the
workflow, for example: \code{00-import.Rmd} and \code{99-publish.Rmd}.

The easiest way to create additional RMarkdown files in your workflow is
to call \code{\link[=proj_workflow_use_rmd]{proj_workflow_use_rmd()}} while you have an existing RMarkdown file
from that workflow open and active in the RStudio IDE.

You'll wish to customize \code{README.Rmd}, perhaps to make a roadmap of the other
files you'll create, as well as a summary.

This workflow is designed to providea  minimally (in a good way) functional
markdown-based website that you can share via GitHub pages. You can
make the site more functional, for example, using \code{html_document}.

The site can be rendered using \code{\link[=proj_workflow_render]{proj_workflow_render()}}.

Finally, you way wish to run the your workflow on a schedule, using GitHub
Actions; you can use \code{\link[=proj_workflow_use_action]{proj_workflow_use_action()}}.
}
\examples{
# not run because it creates side effects
\dontrun{
  proj_use_workflow()
}
}
