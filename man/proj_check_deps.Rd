% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependencies.R
\name{proj_check_deps}
\alias{proj_check_deps}
\alias{proj_update_deps}
\title{Check or update dependency declaration}
\usage{
proj_check_deps(path = usethis::proj_get())

proj_update_deps(path = usethis::proj_get(), remove_extra = FALSE)
}
\arguments{
\item{path}{\code{character}, path to the project directory. If your current
working-directory in is in the project, the default will do the right thing.}

\item{remove_extra}{\code{logical}, indicates to remove dependency-declarations
that \code{\link[renv:dependencies]{renv::dependencies()}} can't find being used.}
}
\value{
Invisible \code{NULL}, called for side effects.
}
\description{
This uses \code{\link[renv:dependencies]{renv::dependencies()}}, which scans your project directory for
package-dependency declarations. It compares packages detected in the code
with those declared in the \code{DESCRIPTION} to determine
missing and extra package-dependency declarations.

By default, \code{proj_upate_deps()} will not remove extra package-dependency
declarations; you can change this by using \code{remove_extra = TRUE}.

\describe{
\item{proj_check_deps()}{Prints missing and extra dependencies.}
\item{proj_update_deps()}{Updates \code{DESCRIPTION} file with missing and
extra dependencies.}
}
}
\examples{
# not run because it produces side effects
if (FALSE) {

  # check DESCRIPTION for missing and extra dependencies
  proj_check_deps()

  # update DESCRIPTION with missing dependencies
  proj_update_deps()
}
}
